package com.mf_rpc_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.mf_rpc_sdk.openlegacy.Fininq2;
import com.mf_rpc_sdk.openlegacy.Fininq2CreditCards;
import com.mf_rpc_sdk.openlegacy.Fininq2Dfhcommarea;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import javax.inject.Inject;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test FINSRVServiceTest.
 *  The interface FINSRVService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "FINSRV")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class FINSRVServiceImpl implements FINSRVService {

    @Inject
    private ApplicationContext applicationContext;


    @Inject
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getFINSRV", entities = {
            @EntityMapping(alias="fininq2", entity=com.mf_rpc_sdk.openlegacy.Fininq2.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "fininq2.dfhcommarea.custId", expression = "custId")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "creditCards", expression = "fininq2.dfhcommarea.creditCards")})
    public FINSRVOut getFINSRV(FINSRVIn fINSRVIn) throws Exception {
        FINSRVOut fINSRVOut = new FINSRVOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession mfRpcSdkRpcSession = applicationContext.getBean("mfRpcSdkRpcSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            Fininq2 fininq2 = serviceBinder.bindInputs(this, "getFINSRV", "fininq2", new Fininq2(), fINSRVIn);
            fininq2 = mfRpcSdkRpcSession.doAction(ActionUtil.getRpcAction(Fininq2.class), fininq2);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            fINSRVOut = serviceBinder.bindOutput(this, "getFINSRV", fINSRVOut, new String[]{"fINSRVIn", "fininq2"}, fINSRVIn, fininq2);
            /* autogenerated - output block end */;

            return fINSRVOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            mfRpcSdkRpcSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
